// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int              @id @default(autoincrement())
  username         String           @unique
  nickname         String?
  email            String?          @unique
  password         String
  avatarURL        String?
  type             String
  caption          String?
  personalPage     String?
  quizScore        String?          @default("[]")
  firstPage        String           @default("/")
  fontFamily       String           @default("'Noto Sans KR', sans-serif")
  goldenbellScore  Int              @default(100)
  cooperationScore Int              @default(100)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  question         Question[]
  quiz             Quiz[]
  followers        User[]           @relation("FollowRelation", references: [id])
  following        User[]           @relation("FollowRelation", references: [id])
  students         User[]           @relation("TeacherStudentRelation", references: [id])
  teacher          User[]           @relation("TeacherStudentRelation", references: [id])
  quizLike         QuizLike[]
  questionLike     QuestionLike[]
  tags             Tag[]
  followQuiz       Quiz[]           @relation("QuizFollowRelation")
  followQuestion   Question[]       @relation("QuestionFollowRelation")
  homework         Homework[]
  homeworkResult   HomeworkResult[]
  notice           Notice[]
}

model Question {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  question     String
  answer       String
  type         String
  hint         String?
  distractor   String?
  image        String?
  state        String
  updateInfo   String?
  hits         Int            @default(0)
  quiz         Quiz[]
  tags         Tag[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  questionLike QuestionLike[]
  likes        Int            @default(0)
  followUser   User[]         @relation("QuestionFollowRelation")
}

model Quiz {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  title      String
  state      String
  caption    String
  order      String?
  updateInfo String?
  hits       Int        @default(0)
  questions  Question[]
  tags       Tag[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  quizLike   QuizLike[]
  likes      Int        @default(0)
  followUser User[]     @relation("QuizFollowRelation")
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[]
  quiz      Quiz[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     User[]
}

model QuizLike {
  id          Int      @id @default(autoincrement())
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quizId      Int
  userId      Int
  quizOnwerId Int?

  @@unique([quizId, userId])
}

model QuestionLike {
  id              Int      @id @default(autoincrement())
  question        Question @relation(fields: [questionId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  questionId      Int
  userId          Int
  questionOnwerId Int?

  @@unique([questionId, userId])
}

model Homework {
  id          Int      @id @default(autoincrement())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User[]
  quizId      Int
  targetScore Int?
  score       String
  order       Int?
  mode        String
  teacherId   Int
  finish      Boolean  @default(false)
}

model HomeworkResult {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  quizId     Int
  result     String
  score      Int
  title      String
  homeworkId Int?
}

model Notice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String
  message   String
  info      String
  sender    String
  confirm   Boolean  @default(false)
}
