// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int            @id @default(autoincrement())
  username       String         @unique
  nickname       String?        @unique
  email          String?
  password       String
  avatarURL      String?
  type           String
  caption        String?
  personalPage   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  question       Question[]
  quiz           Quiz[]
  followers      User[]         @relation("FollowRelation", references: [id])
  following      User[]         @relation("FollowRelation", references: [id])
  students       User[]         @relation("TeacherStudentRelation", references: [id])
  teacher        User[]         @relation("TeacherStudentRelation", references: [id])
  quizLike       QuizLike[]
  questionLike   QuestionLike[]
  tags           Tag[]
  followQuiz     Quiz[]         @relation("QuizFollowRelation")
  followQuestion Question[]     @relation("QuestionFollowRelation")
}

model Question {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  question     String
  answer       String
  type         String
  hint         String?
  distractor   String?
  image        String?
  state        String
  updateInfo   String?
  hits         Int            @default(0)
  quiz         Quiz[]
  tags         Tag[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  questionLike QuestionLike[]
  likes        Int            @default(0)
  followUser   User[]         @relation("QuestionFollowRelation")
}

model Quiz {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  title      String
  state      String
  caption    String
  updateInfo String?
  hits       Int        @default(0)
  questions  Question[]
  tags       Tag[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  quizLike   QuizLike[]
  likes      Int        @default(0)
  followUser User[]     @relation("QuizFollowRelation")
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[]
  quiz      Quiz[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     User[]
}

model QuizLike {
  id        Int      @id @default(autoincrement())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizId    Int
  userId    Int

  @@unique([quizId, userId])
}

model QuestionLike {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId Int
  userId     Int

  @@unique([questionId, userId])
}
